type Settings @entity {
  id: ID!
  priceOriginal: BigInt!
  priceEdition: BigInt!
  maxEditions: BigInt!
}

type OriginalPhoto @entity {
  id: ID!
  editionId: BigInt!
  uri: String
  purchasedBy: Wallet
  purchasedAt: BigInt
  currentOwner: Wallet
}

type EditionPhoto @entity {
  id: ID!
  originalId: BigInt!
  uri: String
  purchasedBy: [Wallet!]!
  currentOwners: [Wallet!]!
  maxEditions: BigInt!
  totalPurchased: BigInt!
}

type RootsPhoto @entity {
  id: ID!
  tokenURI: String!
  currentOwner: Wallet!
  hasClaimedEdition: Boolean!
}

type Wallet @entity {
  id: ID!
  address: Bytes!
  originals: [OriginalPhoto!]! @derivedFrom(field: "currentOwner")
  editions: [EditionPhoto!]! @derivedFrom(field: "currentOwners")
  roots: [RootsPhoto!]! @derivedFrom(field: "currentOwner")
}

enum TransferType {
  Transfer
  Purchase
  RootsClaim
  Burn
}

type Transfer @entity {
  id: ID!
  tokenId: BigInt!
  rootsId: BigInt
  from: Wallet!
  to: Wallet!
  txHash: Bytes!
  txType: TransferType!
  timestamp: BigInt!
}
