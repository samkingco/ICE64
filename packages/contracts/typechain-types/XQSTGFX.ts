/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type HeaderStruct = {
  version: BigNumberish;
  width: BigNumberish;
  height: BigNumberish;
  numColors: BigNumberish;
  backgroundColorIndex: BigNumberish;
  scale: BigNumberish;
  reserved: BigNumberish;
  alpha: boolean;
  hasBackground: boolean;
  totalPixels: BigNumberish;
  bpp: BigNumberish;
  ppb: BigNumberish;
  paletteStart: BigNumberish;
  dataStart: BigNumberish;
};

export type HeaderStructOutput = [
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  boolean,
  boolean,
  number,
  number,
  number,
  number,
  number
] & {
  version: number;
  width: number;
  height: number;
  numColors: number;
  backgroundColorIndex: number;
  scale: number;
  reserved: number;
  alpha: boolean;
  hasBackground: boolean;
  totalPixels: number;
  bpp: number;
  ppb: number;
  paletteStart: number;
  dataStart: number;
};

export interface XQSTGFXInterface extends utils.Interface {
  functions: {
    "decodeHeader(bytes)": FunctionFragment;
    "decodePalette(bytes)": FunctionFragment;
    "draw(bytes)": FunctionFragment;
    "drawRects(bytes)": FunctionFragment;
    "drawRectsUnsafe(bytes)": FunctionFragment;
    "drawUnsafe(bytes)": FunctionFragment;
    "valid(bytes)": FunctionFragment;
    "validHeader(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decodeHeader",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodePalette",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "draw", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "drawRects",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "drawRectsUnsafe",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "drawUnsafe",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "valid", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "validHeader",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodePalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "draw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drawRects", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drawRectsUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawUnsafe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "valid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validHeader",
    data: BytesLike
  ): Result;

  events: {};
}

export interface XQSTGFX extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: XQSTGFXInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decodeHeader(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[HeaderStructOutput]>;

    decodePalette(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    draw(data: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    drawRects(data: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    drawRectsUnsafe(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    drawUnsafe(data: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    valid(data: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    validHeader(data: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
  };

  decodeHeader(
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<HeaderStructOutput>;

  decodePalette(data: BytesLike, overrides?: CallOverrides): Promise<string[]>;

  draw(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  drawRects(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  drawRectsUnsafe(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  drawUnsafe(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  valid(data: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  validHeader(data: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    decodeHeader(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<HeaderStructOutput>;

    decodePalette(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    draw(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    drawRects(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    drawRectsUnsafe(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    drawUnsafe(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    valid(data: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    validHeader(data: BytesLike, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    decodeHeader(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodePalette(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    draw(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    drawRects(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    drawRectsUnsafe(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drawUnsafe(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    valid(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    validHeader(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decodeHeader(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodePalette(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    draw(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawRects(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawRectsUnsafe(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawUnsafe(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    valid(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validHeader(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
