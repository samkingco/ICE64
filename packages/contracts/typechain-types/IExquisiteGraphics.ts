/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type HeaderStruct = {
  version: BigNumberish;
  width: BigNumberish;
  height: BigNumberish;
  numColors: BigNumberish;
  backgroundColorIndex: BigNumberish;
  scale: BigNumberish;
  reserved: BigNumberish;
  alpha: boolean;
  hasBackground: boolean;
  totalPixels: BigNumberish;
  bitsPerPixel: BigNumberish;
  pixelsPerByte: BigNumberish;
  paletteStart: BigNumberish;
  dataStart: BigNumberish;
};

export type HeaderStructOutput = [
  number,
  number,
  number,
  number,
  number,
  number,
  number,
  boolean,
  boolean,
  number,
  number,
  number,
  number,
  number
] & {
  version: number;
  width: number;
  height: number;
  numColors: number;
  backgroundColorIndex: number;
  scale: number;
  reserved: number;
  alpha: boolean;
  hasBackground: boolean;
  totalPixels: number;
  bitsPerPixel: number;
  pixelsPerByte: number;
  paletteStart: number;
  dataStart: number;
};

export type DrawContextStruct = {
  data: BytesLike;
  header: HeaderStruct;
  palette: string[];
  pixels: BigNumberish[];
};

export type DrawContextStructOutput = [
  string,
  HeaderStructOutput,
  string[],
  number[]
] & {
  data: string;
  header: HeaderStructOutput;
  palette: string[];
  pixels: number[];
};

export interface IExquisiteGraphicsInterface extends utils.Interface {
  functions: {
    "decodeDrawContext(bytes)": FunctionFragment;
    "decodeHeader(bytes)": FunctionFragment;
    "decodePalette(bytes)": FunctionFragment;
    "draw(bytes)": FunctionFragment;
    "drawPixels(bytes)": FunctionFragment;
    "drawPixelsUnsafe(bytes)": FunctionFragment;
    "drawUnsafe(bytes)": FunctionFragment;
    "ty()": FunctionFragment;
    "validate(bytes)": FunctionFragment;
    "validateHeader(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "decodeDrawContext",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeHeader",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decodePalette",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "draw", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "drawPixels",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "drawPixelsUnsafe",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "drawUnsafe",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "ty", values?: undefined): string;
  encodeFunctionData(functionFragment: "validate", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "validateHeader",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "decodeDrawContext",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodePalette",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "draw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "drawPixels", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "drawPixelsUnsafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "drawUnsafe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateHeader",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IExquisiteGraphics extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IExquisiteGraphicsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    decodeDrawContext(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[DrawContextStructOutput] & { ctx: DrawContextStructOutput }>;

    decodeHeader(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[HeaderStructOutput]>;

    decodePalette(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    draw(data: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    drawPixels(data: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    drawPixelsUnsafe(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    drawUnsafe(data: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "ty()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "ty(string)"(
      message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validate(data: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    validateHeader(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  decodeDrawContext(
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<DrawContextStructOutput>;

  decodeHeader(
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<HeaderStructOutput>;

  decodePalette(data: BytesLike, overrides?: CallOverrides): Promise<string[]>;

  draw(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  drawPixels(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  drawPixelsUnsafe(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  drawUnsafe(data: BytesLike, overrides?: CallOverrides): Promise<string>;

  "ty()"(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "ty(string)"(
    message: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validate(data: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  validateHeader(data: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    decodeDrawContext(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<DrawContextStructOutput>;

    decodeHeader(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<HeaderStructOutput>;

    decodePalette(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string[]>;

    draw(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    drawPixels(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    drawPixelsUnsafe(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    drawUnsafe(data: BytesLike, overrides?: CallOverrides): Promise<string>;

    "ty()"(overrides?: CallOverrides): Promise<void>;

    "ty(string)"(message: string, overrides?: CallOverrides): Promise<void>;

    validate(data: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    validateHeader(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    decodeDrawContext(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeHeader(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodePalette(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    draw(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    drawPixels(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    drawPixelsUnsafe(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    drawUnsafe(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "ty()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "ty(string)"(
      message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validate(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    validateHeader(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    decodeDrawContext(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeHeader(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodePalette(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    draw(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawPixels(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawPixelsUnsafe(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    drawUnsafe(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ty()"(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "ty(string)"(
      message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validate(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateHeader(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
