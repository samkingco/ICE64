/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ICE64DataStore,
  ICE64DataStoreInterface,
} from "../ICE64DataStore";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "string",
        name: "originalsBaseURI_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_size",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_end",
        type: "uint256",
      },
    ],
    name: "InvalidCodeAtRange",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidPhotoData",
    type: "error",
  },
  {
    inputs: [],
    name: "WriteError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "getBaseURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getRawPhotoData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "baseURI",
        type: "string",
      },
    ],
    name: "setOriginalsBaseURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chunkId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "storeChunkedEditionPhotoData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000be938038062000be9833981016040819052620000349162000157565b600080546001600160a01b0319166001600160a01b03841690811782556040518492907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a3508051620000929060019060208401906200009b565b50505062000293565b828054620000a99062000257565b90600052602060002090601f016020900481019282620000cd576000855562000118565b82601f10620000e857805160ff191683800117855562000118565b8280016001018555821562000118579182015b8281111562000118578251825591602001919060010190620000fb565b50620001269291506200012a565b5090565b5b808211156200012657600081556001016200012b565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200016b57600080fd5b82516001600160a01b03811681146200018357600080fd5b602084810151919350906001600160401b0380821115620001a357600080fd5b818601915086601f830112620001b857600080fd5b815181811115620001cd57620001cd62000141565b604051601f8201601f19908116603f01168101908382118183101715620001f857620001f862000141565b8160405282815289868487010111156200021157600080fd5b600093505b8284101562000235578484018601518185018701529285019262000216565b82841115620002475760008684830101525b8096505050505050509250929050565b600181811c908216806200026c57607f821691505b6020821081036200028d57634e487b7160e01b600052602260045260246000fd5b50919050565b61094680620002a36000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806313af403514610067578063714c53981461007c5780638da5cb5b1461009a578063ad508634146100c5578063d526980a146100d8578063ee68e061146100eb575b600080fd5b61007a6100753660046105a9565b6100fe565b005b61008461017c565b604051610091919061062e565b60405180910390f35b6000546100ad906001600160a01b031681565b6040516001600160a01b039091168152602001610091565b61007a6100d3366004610657565b61020e565b6100846100e6366004610708565b61024f565b61007a6100f9366004610721565b6102da565b6000546001600160a01b031633146101315760405162461bcd60e51b81526004016101289061079d565b60405180910390fd5b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b60606001805461018b906107c3565b80601f01602080910402602001604051908101604052809291908181526020018280546101b7906107c3565b80156102045780601f106101d957610100808354040283529160200191610204565b820191906000526020600020905b8154815290600101906020018083116101e757829003601f168201915b5050505050905090565b6000546001600160a01b031633146102385760405162461bcd60e51b81526004016101289061079d565b805161024b906001906020840190610510565b5050565b60606000600261026060018561080d565b61026a919061083a565b61027590600161084e565b90506000600261028660018661080d565b6102909190610866565b905060006102a06111088361087a565b6000848152600260205260409020549091506102d1906001600160a01b0316826102cc6111088261084e565b61039f565b95945050505050565b6000546001600160a01b031633146103045760405162461bcd60e51b81526004016101289061079d565b610311600261110861087a565b811461032f57604051623d2e6360e51b815260040160405180910390fd5b61036e82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103ca92505050565b60009384526002602052604090932080546001600160a01b0319166001600160a01b03909416939093179092555050565b60606103c0846103b085600161084e565b6103bb85600161084e565b61042f565b90505b9392505050565b6000806103f5836040516020016103e19190610899565b6040516020818303038152906040526104e4565b90508051602082016000f091506001600160a01b0382166104295760405163046a55db60e11b815260040160405180910390fd5b50919050565b6060833b60008190036104525750506040805160208101909152600081526103c3565b808411156104705750506040805160208101909152600081526103c3565b838310156104a25760405163162544fd60e11b8152600481018290526024810185905260448101849052606401610128565b83830384820360008282106104b757826104b9565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b60608151826040516020016104fa9291906108bf565b6040516020818303038152906040529050919050565b82805461051c906107c3565b90600052602060002090601f01602090048101928261053e5760008555610584565b82601f1061055757805160ff1916838001178555610584565b82800160010185558215610584579182015b82811115610584578251825591602001919060010190610569565b50610590929150610594565b5090565b5b808211156105905760008155600101610595565b6000602082840312156105bb57600080fd5b81356001600160a01b03811681146103c357600080fd5b60005b838110156105ed5781810151838201526020016105d5565b838111156105fc576000848401525b50505050565b6000815180845261061a8160208601602086016105d2565b601f01601f19169290920160200192915050565b6020815260006103c36020830184610602565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561066957600080fd5b813567ffffffffffffffff8082111561068157600080fd5b818401915084601f83011261069557600080fd5b8135818111156106a7576106a7610641565b604051601f8201601f19908116603f011681019083821181831017156106cf576106cf610641565b816040528281528760208487010111156106e857600080fd5b826020860160208301376000928101602001929092525095945050505050565b60006020828403121561071a57600080fd5b5035919050565b60008060006040848603121561073657600080fd5b83359250602084013567ffffffffffffffff8082111561075557600080fd5b818601915086601f83011261076957600080fd5b81358181111561077857600080fd5b87602082850101111561078a57600080fd5b6020830194508093505050509250925092565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b600181811c908216806107d757607f821691505b60208210810361042957634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561081f5761081f6107f7565b500390565b634e487b7160e01b600052601260045260246000fd5b60008261084957610849610824565b500490565b60008219821115610861576108616107f7565b500190565b60008261087557610875610824565b500690565b6000816000190483118215151615610894576108946107f7565b500290565b60008152600082516108b28160018501602087016105d2565b9190910160010192915050565b606360f81b815260e083901b6001600160e01b03191660018201526880600e6000396000f360b81b6005820152815160009061090281600e8501602087016105d2565b91909101600e01939250505056fea26469706673582212206fdb2994a4b2e110637ed9c53661c02bbb28672baec85cd2a97076eb658128bc64736f6c634300080e0033";

type ICE64DataStoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ICE64DataStoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ICE64DataStore__factory extends ContractFactory {
  constructor(...args: ICE64DataStoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    owner: string,
    originalsBaseURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ICE64DataStore> {
    return super.deploy(
      owner,
      originalsBaseURI_,
      overrides || {}
    ) as Promise<ICE64DataStore>;
  }
  getDeployTransaction(
    owner: string,
    originalsBaseURI_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      owner,
      originalsBaseURI_,
      overrides || {}
    );
  }
  attach(address: string): ICE64DataStore {
    return super.attach(address) as ICE64DataStore;
  }
  connect(signer: Signer): ICE64DataStore__factory {
    return super.connect(signer) as ICE64DataStore__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ICE64DataStoreInterface {
    return new utils.Interface(_abi) as ICE64DataStoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICE64DataStore {
    return new Contract(address, _abi, signerOrProvider) as ICE64DataStore;
  }
}
